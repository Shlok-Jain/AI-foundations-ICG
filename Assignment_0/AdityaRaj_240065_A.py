# -*- coding: utf-8 -*-
"""Copy of AI_Foundations_Assignment_0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CGrAVXUUj8YShhcIZekMQRDbdjbiDhnx

Instructions for the assignment


*   Fill the codeblocks according to the comments given
*   Hints are given wherever required
*   Please note that copying will not be tolerated, and appropriate action will be taken if we suspect any misconduct.
*   You're welcome to utilize any online resources in case you feel stuck anywhere

# Section A *(2 Marks each)*

## NumPy (Numerical Python)

### Multidimensional array object
- Array is a grid of homogeneous elements which can be indexed in various ways
- Different from Python list which can store different data types
- NumPy stores multidimensional arrays as an instance of **ndarray**
"""

import numpy as np

# Python list to initialize a one dimensional NumPy array of numbers 1 to 5 and then print it
ar= np.array([1,2,3,4,5])
print(ar)

# Python list to initialize a two dimensional NumPy array of shape [3,3] and then print it
ar1= np.array([[1,2,3],[4,5,6],[7,8,9]])
print(ar1)

# Write a NumPy function to create an array with random values of shape [3,4]
def nothing():
  ar2= np.random.random([3,4])
  return ar2

# Write a NumPy function to create an array with all elements initialized as zero of shape [3,4]
def nope():
  ar3= np.zeros([3,4])
  return ar3
# Write a NumPy function to create an array with all elements initialized as ones of shape [3,4]
def something():
  ar4= np.ones([3,4])
  return ar4

# Write a NumPy function to create an array containing a range of evenly spaced intervals
def create_linspace_array(start=0, stop=10, num=5):
    return np.linspace(start, stop, num)
# Hint : Use np.arange or np.linspace

"""### Basic array operations
- algebraic operations
- logical operations
"""

a = np.array([[-4,6,8], [9, 3, 1], [1, 8, 5]])
b = np.array([[11,16,18], [90, 37, 81], [61, 48, 75]])

# Write a NumPy function to add, subtract, multiply and divide arrays 'a' and 'b'
def operate(a, b):
    operation = input("add, subtract, multiply or divide?")
    if operation == 'add':
        return a + b
    elif operation == 'subtract':
        return a - b
    elif operation == 'multiply':
        return a * b
    elif operation == 'divide':
        return a / b
    else:
        print("Please chose a valid operation.")

# Write a NumPy function to get the sum of the array 'a' along axis=0
def sum_0(a):
  return np.sum(a,0)
# Write a NumPy function to get the sum of the array 'a' along axis=1
def sum_1(a):
  return np.sum(a,1)

# Write a NumPy function to reverse the array 'a'
def rev(a):
  return np.flip(a)

# Write a NumPy function to reverse the array 'a' along axis=0
def rev_0(a):
  return np.flip(a,0)

# Write a NumPy function to reverse the array 'a' along axis=1
def rev_1(a):
  return np.flip(a,1)

"""### Sorting and concatenation
- sort arrays
- join multiple arrays

"""

a = np.array([[-4,6,8],
              [9, 3, 1],
              [1, 8, 5]])
b = np.array([[11,16,18], [90, 37, 81], [61, 48, 75]])

# Write a NumPy function to sort the array 'a'
def sort(a):
  return np.sort(a)

# Write a NumPy function to sort the array 'a' along axis=0
def sort_0(a):
  return np.sort(a, 0)

# Write a NumPy function to sort the array 'a' along axis=1
def sort_1(a):
  return np.sort(a,1)
# Write a NumPy function to sort the array 'a' in descending order along axis=0
def desc_order(a):
  return -np.sort(-a,axis = 0)

# Write a NumPy function to argsort the array along axis=0
def argsort_0():
  return np.argsort(a,axis = 0)
# Write a NumPy function to argsort the array along axis=1
def argsort_1():
  return np.argsort(a, axis = 1)

# Write a NumPy function to concatenate the arrays 'a' and 'b'
def conc(a,b):
  c=np.concatenate([a,b])
  return c

# Write a NumPy function to concatenate the arrays 'a' and 'b' along axis = 0
def conc_0(a,b):
  d = np.stack([a,b],0)
  return d

# Note: You can do the same function using stacking, discover and try that :)

"""### Reshaping arrays
- the number of dimensions of the array
-  shape of n-dimensional array as a tuple with n elements s.t. $i^{th}$ element is the length of the $i^{th}$ dimension of the array
- total number of elements of the array
- reshapes the array
- flattens multidimensional array into a 1D array
- adds new dimensions to the array
"""

a = np.array([[4,6,8], [9, 3, 1], [1, 8, 5]])

# Write a NumPy function to get the Number of dimensions
def dimension(a):
  return a.ndim

# Write a NumPy function to get the Shape of the array
def shape(a):
  return a.shape

# Write a NumPy function to get the Size of the array
def size(a):
  return a.size

# Write a NumPy function to Reshape the array 'a' to the dimension (1,9)
def reshape(a):
  return a.reshape(1,9)

# Write a NumPy function to add a new axis to the array 'a'
def add_new_axis_1(a):
  return np.array(a, ndmin= a.ndim + 1)

def add_new_axis_2(a):
  return np.expand_dims(a, axis=0)
# Note : Show atleast two different ways of doing this

"""### Indexing and slicing
- NumPy allows indexing array using tuple of nonnegative integers, booleans, array or integers
"""

a = np.array([[4,6,0], [0, 3, 1], [1, 8, 5]])

# Write a NumPy function to index and slice NumPy arrays similar to Python lists

def index_by_int(a):
  #for example, we need to get the 3rd element of the 2nd row of array a
  return a[1,2]
def index_by_tuple(a):
  #for example, we need to get the number in the 2nd column of first and the third row
  return a[(1,3),1]
def index_by_range(a):
  #for example, we need to get the number in the 2nd column of the first two rows
  return a[0:2,1]

# Show all three - indexing by a integer, indexing by a tuple, using range

# Write a NumPy function to select values satisfying a specific condition like Values greater than 4
def cond(a):
  x = a[a>4]
  return x
# Write a NumPy function to select values satisfying mulitple conditions like Values greater than 4 and divisible by 2
def cond_(a):
  z = (a[a>4])[(a[a>4])%2==0]
  return z

"""### Copying arrays
- new array object with a copy of the data
- Changes made in the copy array is not reflected in the original array
"""

a = np.array([[4,6,0], [0, 3, 1], [1, 8, 5]])

# Write a NumPy function to copy the array 'a' and finally print an array where all elements are increased by 1
def inc_element_by_1(a):
  a_copy = np.copy(a)
  print(a_copy+1)

"""## Pandas ( Python Data Analysis Library)

### Main Features
- Easy handling of missing data in both floating point and non-floating point data.
- Automatic and explicit data alignment, making it easy to perform computations and transformations on data sets.

#### Generating the dataset

Run the following load command to get the 2-Dim iris dataset. Do the following operations on it and please dont edit this cell
"""

url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data'
iris_2d = np.genfromtxt(url, delimiter=',', dtype='float', usecols=[0,1,2,3])

"""#### Basic Data Analysis"""

# Write a Pandas function to drop rows that contain a missing value.
import pandas as pd
def drop_miss(iris_2d):
  df = pd.DataFrame(iris_2d)
  df.dropna(inplace=True)
  return df

# Write a Pandas function to find the correlation between the first two columns.
def correlation(df):
  corr_two_columns = df[df.columns[:2]].corr()
  return corr_two_columns

# Write a Pandas function to find the mean, median and standard deviation of column 3.
def mean_median_std(df):
  a,b,c = df[2].mean(),df[2].median,df[2].std()
  return {"mean": a, "median":b, "Standard Deviation": c}

# Write a Pandas function to create a new column for volume in iris_2d, where volume is (pi x petallength x sepal_length^2)/3
def add_vol(iris_2d):
  df = pd.DataFrame(iris_2d, columns=['sepallength', 'sepalwidth', 'petallength', 'petalwidth'])
  df['Volume'] = 3.14* df['sepallength']*df['petallength']*df['sepallength']
  iris_2d = np.hstack([iris_2d, df[['Volume']].values])
  return iris_2d

# Hints:
# 1. Introduce new dimension to match iris_2d's
# 2. Add the new column

"""# Section B *(2 Marks each)*

###NumPy

Q1 Let x = np.arange(4, dtype=np.int64). Create an array of ones with the same shape and type as X.
"""

x = np.arange(4, dtype=np.int64)
ans = np.ones(x.shape, dtype = np.int64)

"""Q2 Let x be an array [1, 2, 3, ..., 9]. Split x into 3 arrays, each of which has 4, 2, and 3 elements in the original order."""

x = np.array([1,2,3,4,5,6,7,8,9])
arr = np.split(x,[4,6])

"""Q3 Initiate x as a 2x5 array with random values from 0 to 10(not inclusive).Get the maximum and minimum values and their indices of x along the second axis."""

x = np.random.randint(1,10,size = (2,5))
max = np.max(x, axis = 1)
print(x)
min = np.min(x, axis = 1)
for i in range(1,len(max)+1):
  k = max[i-1]
  j = np.where(x[i-1]==k)
  print(f'The maximum value in row {i} is {k} with index {j[0]}')

for i in range(1,len(min)+1):
  k = min[i-1]
  j = np.where(x[i-1]==k)
  print(f'The minimum value in row {i} is {k} with index {j[0]}')

"""### Pandas

Run the following load command and solve the following questions
"""

url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data'
iris = np.genfromtxt(url, delimiter=',', dtype='object')
names = ('sepallength', 'sepalwidth', 'petallength', 'petalwidth', 'species')

"""Q4 Write a Pandas function to find the count of unique species."""

def uniqueu(iris):
  df = pd.DataFrame(iris, columns = names)
  return df['species'].nunique()

"""# Q5 Write a Pandas function to bin the petal length (3rd) column of iris_2d to form a text array, such that if petal length is:
- Less than 3 –> ‘small’
- 3-5 –> ‘medium’
- greater than equal to 5 –> ‘large’
"""

def petal_to_text(iris_2d):
  iris_2d = iris_2d.astype(str)
  df = pd.DataFrame(iris_2d, columns= ('sepallength', 'sepalwidth', 'petallength', 'petalwidth'))
  for i in range(len(df)):
    if float(df.loc[i,'petallength'])<3:
        df.loc[i,'petallength'] = 'Small'
    elif float(df.loc[i,'petallength'])>=3 and float(df.loc[i,'petallength'])<5:
        df.loc[i,'petallength'] = 'Medium'
    elif float(df.loc[i,'petallength'])>=5:
        df.loc[i,'petallength'] = 'Large'

  iris_2d[:, 2] = df['petallength'].values
  return iris_2d

"""Q6 Write a Pandas function to find the most frequent value of petal length (3rd column) in iris dataset"""

def most_freq_petal_length(iris):
  df = pd.DataFrame(iris, columns = ['sepallength', 'sepalwidth', 'petallength', 'petalwidth', 'species'])
  return df['petallength'].mode()